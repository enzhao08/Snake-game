/** 
* \page Général 
* \brief Programme pour jouer au jeu snake dans le terminal
* \author ANNIC Enzo
* \version 2.0
* \date 4 novembre 2024
*
*
**/

/**********************************************************/
/*            Déclarations des constantes                 */
/**********************************************************/

#include <fcntl.h>
#include <unistd.h>
#include <termios.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>

/**
 * \def TAILLE 
 * \brief taille maximale du serpent
 */
#define TAILLE 10

/**
 * \def TETE
 * \brief caractère defini pour la tête du serpent
 */
#define TETE 'O'

/**
 * \def CORPS
 * \brief caractère defini pour le corps du serpent
 */
#define CORPS 'X'

/**
 * \def QUITTER
 * \brief caractère defini pour quitter l'execution du programme
 */
#define QUITTER 'a'

/**
 * \def TEMPO
 * \brief temps qui défini la vitesse du serpent, 100000 = 100ms
 */
#define TEMPO 100000

/**
 * \def HAUT
 * \brief caractère defini pour déplacer le serpent vers le haut
 */
#define HAUT 'z'

/**
 * \def GAUCHE
 * \brief caractère defini pour déplacer le serpent vers la gauche
 */
#define GAUCHE 'q'

/**
 * \def BAS
 * \brief caractère defini pour déplacer le serpent vers le bas
 */
#define BAS 's'

/**
 * \def DROITE
 * \brief caractère defini pour déplacer le serpent vers la droite
 */
#define DROITE 'd'

/**
 * \def LARGEUR_BORDURE
 * \brief Défini la largeur de la bordure du plateau
 */
#define LARGEUR_BORDURE 80

/**
 * \def HAUTEUR_BORDURE
 * \brief Défini la hauteur de la bordure du plateau
 */
#define HAUTEUR_BORDURE 40

/**
 * \def BORDURE
 * \brief Défini le caractère qui constituera la bordure du plateau
 */
#define BORDURE '#'

/**
 * \def ESPACE
 * \brief Défini le caractère qui constituera l'intérieur du plateau
 */
#define ESPACE ' '

/**
 * \def TAILLE_PAVE
 * \brief Défini la taille d'un pavé => 5 sur 5
 */
#define TAILLE_PAVE 5

/**
* \def NOMBRE_PAVE
* \brief Défini le nombres de pavés constituant le plateau
 */
#define NOMBRE_PAVE 4
/**
 * \def tab[TAILLE]
 * \brief déclaration du tableau de taille 10 pour créer et faire bouger le serpent
 */
const int tab[TAILLE];

char plateau[HAUTEUR_BORDURE][LARGEUR_BORDURE];

/**********************************************************/
/*  Déclarations des prototypes des procédures/fonctions  */
/**********************************************************/

void gotoXY(int x, int y);
void afficher(int x, int y, char c);
void effacer(int x, int y);
void dessinerSerpent(int lesX[], int lesY[]);
int kbhit();
void progresser(int lesX[], int lesY[], char direction, bool *enCours);
void disableEcho();
void enableEcho();
void initPlateau(char plateau[HAUTEUR_BORDURE][LARGEUR_BORDURE]);
void dessinerPlateau(char plateau[HAUTEUR_BORDURE][LARGEUR_BORDURE], int lesX[], int lesY[]);

/**********************************************************/
/*                 Programme principal                    */
/**********************************************************/

/**
 * \fn int main()
 * \brief programme principal du jeu snake
 * \return int
 *
 * Le programme demande à l'utilisateur de saisir les coordonnées de départ du serpent dans le terminal
 */
int main() {
    srand(time(NULL));
    int lesX[TAILLE];   // Tableau pour les coordonnées x du serpent
    int lesY[TAILLE];   // Tableau pour les coordonnées y du serpent

    // Initialisation du plateau et affichage
    initPlateau(plateau);         // Initialise le plateau avec bordures
    system("clear");              // Efface le terminal avant d'afficher le jeu
    dessinerPlateau(plateau, lesX, lesY);     // Affiche le plateau dans le terminal

    char direction = DROITE;
    bool enCours = true;  // Variable indiquant si le jeu est en cours
    
    lesX[0] = 40; // Position initiale x de la tête
    lesY[0] = 20; // Position initiale y de la tête

    // Positionne chaque segment à gauche de la tête
    for (int i = 1; i < TAILLE; i++) {
        lesX[i] = lesX[i - 1] - 1; // Chaque segment est décalé d'une unité à gauche du précédent
        lesY[i] = 20;              // Garde la même position y pour chaque segment
    }
         
    dessinerSerpent(lesX, lesY);
    
    disableEcho();
    printf("\033[?25l");    //efface le curseur dès juste avant le début du programme

    // Boucle principale avec condition d'arrêt explicite
    while (enCours) {

        // Efface le serpent avant de le déplacer
        for (int i = 0; i < TAILLE; i++) {
            effacer(lesX[i], lesY[i]);
        }

        progresser(lesX, lesY, direction, &enCours); // Fait progresser le serpent

        // Redessine le serpent après déplacement
        dessinerSerpent(lesX, lesY);

        /* Vérifie si une touche a été pressée */ 
        if (kbhit()) {
            char c = getchar();      // Lis le caractère pressé
            
            // En fonction de la touche entrée par l'utilisateur, met à jour la direction du serpent
        switch(c) {
        case HAUT:                         // Si l'utilisateur appuie sur la touche HAUT
        if (direction != BAS) {        // Vérifie que la direction actuelle n'est pas BAS
            direction = HAUT;          // Change la direction vers HAUT si elle n'est pas opposée
        }
        break;

        case BAS:                          // Si l'utilisateur appuie sur la touche BAS
        if (direction != HAUT) {       // Vérifie que la direction actuelle n'est pas HAUT
            direction = BAS;           
        }
        break;

        case GAUCHE:                       // Si l'utilisateur appuie sur la touche GAUCHE
        if (direction != DROITE) {     // Vérifie que la direction actuelle n'est pas DROITE
            direction = GAUCHE;        
        }
        break;

        case DROITE:                       // Si l'utilisateur appuie sur la touche DROITE
        if (direction != GAUCHE) {     // Vérifie que la direction actuelle n'est pas GAUCHE
            direction = DROITE;        
        }
        break;
                case QUITTER:
                    enCours = false; // Change l'état pour sortir de la boucle
                    break;
            }
        }
        usleep(TEMPO);    // modifie la vitesse (pause de 100ms)
    }

    enableEcho();
    printf("\033[?25h");    //réaffiche le curseur après l'arrêt du programme
    return 0;
    
}  

/**
* \fn void gotoXY(int x, int y)
* \brief procédure qui positionne le curseur dans le terminal
* \param x: coordonnée x du curseur
* \param y: coordonnée y du curseur
*
* Positionne le curseur dans le terminal à la position (x, y)
*/
void gotoXY(int x, int y) {
    printf("\033[%d;%df", y + 1, x + 1);  // Ajouter +1 uniquement pour l'affichage
}

/**
* \fn void afficher(int x, int y, char c)
* \brief procédure qui positionne le curseur à un endroit précis (avant l’affichage d’un caractère)
* \param x: coordonnée x du caractère à afficher
* \param y: coordonnée y du caractère à afficher
* \param c: caractère à afficher
* 
* affiche le caractère c à la position (x, y), où x est le numéro de colonne et y le numéro de ligne
*/
void afficher(int x, int y, char c) {
    gotoXY(x, y);
    printf("%c", c);
    fflush(stdout); 
}

/**
* \fn void effacer(int x, int y, char c)
* \brief procédure qui efface un caractère dans le terminal
* \param x : coordonnée x du caractère à effacer
* \param y : coordonnée y du caractère à effacer
*
* affiche un espace à la position (x, y), où x représente le numéro de colonne et y le numéro de ligne
*/
void effacer(int x, int y) {
    gotoXY(x, y);
    printf(" ");
    fflush(stdout);
}

/**
* \fn void dessinerSerpent(int lesX[], int lesY[])
* \brief procédure qui dessine le serpent dans le terminal
* \param lesX : tableau des coordonnées x du serpent
* \param lesY : tableau des coordonnées y du serpent
*
* Affiche le serpent dans le terminal à partir des coordonnées dans les tableaux lesX et lesY, 'O' pour la tête et 'X' pour le corps
*/ 
void dessinerSerpent(int lesX[], int lesY[]) {
    
    for (int i = 1; i < TAILLE; i++) {
        afficher(lesX[i], lesY[i], CORPS);
    }
    afficher(lesX[0], lesY[0], TETE);
}

/**
 * \fn kbhit()
 * \brief fonction qui retourne 1 si un caractère est présent, 0 sinon
 * \return int 
 * 
 *  Cette fonction teste s’il y a eu frappe d’un caractère au clavier et retourne 1 si c’est le cas et 0 sinon
 */
int kbhit() {
    int unCaractere = 0;
    struct termios oldt, newt;
    int ch;
    int oldf;

    // met le terminal en mode non bloquant
    tcgetattr(STDIN_FILENO, &oldt);
    newt = oldt;
    newt.c_lflag &= ~(ICANON | ECHO);
    tcsetattr(STDIN_FILENO, TCSANOW, &newt);
    oldf = fcntl(STDIN_FILENO, F_GETFL, 0);
    fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);
 
    ch = getchar();

    // restaure le mode du terminal
    tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
    fcntl(STDIN_FILENO, F_SETFL, oldf);
 
    if (ch != EOF) {
        ungetc(ch, stdin);
        unCaractere = 1;
    }
    return unCaractere;
}

  
/**
* \fn void progresser(int lesX[], int lesY[], char direction, bool enCours)
* \brief procédure qui déplace le serpent dans le terminal
* \param lesX : tableau des coordonnées x du serpent
* \param lesY : tableau des coordonnées y du serpent
*
* déplace le serpent d'une position vers la droite pour chaque caractère 'O' et 'X' et efface le dernier segment du serpent
*/

void progresser(int lesX[], int lesY[], char direction, bool *enCours) {
    // Efface le dernier segment du corps
    effacer(lesX[TAILLE - 1], lesY[TAILLE - 1]);
    
    /*Décale chaque segment du corps vers l'avant*/ 
    for (int i = TAILLE - 1; i > 0; i--) {
        lesX[i] = lesX[i - 1];
        lesY[i] = lesY[i - 1];
    }

    // En fonction de la direction du serpent, met à jour la position de la tête
    switch(direction) {
    case HAUT:         // Si direction = HAUT
        lesY[0] -= 1;  // Déplace la tête du serpent d'une case vers le haut (diminue y)
        break;
        
    case BAS:          // Si direction = BAS
        lesY[0] += 1;  // Déplace la tête du serpent d'une case vers le bas (augmente y)
        break;

    case GAUCHE:       // Si direction = GAUCHE
        lesX[0] -= 1;  // Déplace la tête du serpent d'une case vers la gauche (diminue x)
        break;

    case DROITE:       // Si direction = DROITE
        lesX[0] += 1;  // Déplace la tête du serpent d'une case vers la droite (augmente x)
        break;
    }
    
    // Vérifie les collisions avec la bordure
    if (plateau[lesY[0]][lesX[0]] == BORDURE) {
        printf("\033[?25h"); // Réaffiche le curseur
        enableEcho();        // Restaure l'affichage du terminal
        printf("\nGame Over: Collision avec un pavé ou une bordure !\n");
        *enCours = false;
    }
    
    // Vérifie si la tête du serpent entre en collision avec son propre corps
    for (int i = 1; i < TAILLE; i++) { // Commence à 1 pour ne pas comparer la tête avec elle-même
        if (lesX[0] == lesX[i] && lesY[0] == lesY[i]) {
            printf("\033[?25h"); // Réaffiche le curseur
            enableEcho();        // Restaure l'affichage du terminal
            printf("\nGame Over: Collision avec le corps du serpent !\n");
            *enCours = false;
            return;
        }
    }    
}

/**
 * \fn void disableEcho()
 * \brief Désactive l'affichage des caractères saisis par l'utilisateur
 */
void disableEcho() {
    struct termios tty;

    // Obtenir les attributs du terminal
    if (tcgetattr(STDIN_FILENO, &tty) == -1) {
        perror("tcgetattr");
        exit(EXIT_FAILURE);
    }

    // Desactiver le flag ECHO
    tty.c_lflag &= ~ECHO;

    // Appliquer les nouvelles configurations
    if (tcsetattr(STDIN_FILENO, TCSANOW, &tty) == -1) {
        perror("tcsetattr");
        exit(EXIT_FAILURE);
    }
}

/**
 * \fn void enableEcho()
 * \brief Réactive l'affichage des caractères saisis par l'utilisateur
 */
void enableEcho() {
    struct termios tty;

    // Obtenir les attributs du terminal
    if (tcgetattr(STDIN_FILENO, &tty) == -1) {
        perror("tcgetattr");
        exit(EXIT_FAILURE);
    }

    // Reactiver le flag ECHO
    tty.c_lflag |= ECHO;

    // Appliquer les nouvelles configurations
    if (tcsetattr(STDIN_FILENO, TCSANOW, &tty) == -1) {
        perror("tcsetattr");
        exit(EXIT_FAILURE);
    }
}

/**
 * \fn void initPlateau(char plateau[HAUTEUR_BORDURE][LARGEUR_BORDURE])
 * \brief Initialise le plateau avec des bordures et des espaces
 * \param plateau : tableau 2D représentant le plateau de jeu
 *
 * La fonction initialise le plateau en définissant des bordures en # et des espaces à l'intérieur.
 */
void initPlateau(char plateau[HAUTEUR_BORDURE][LARGEUR_BORDURE]) {
    for (int y = 0; y < HAUTEUR_BORDURE; y++) {
        for (int x = 0; x < LARGEUR_BORDURE; x++) {
            if (y == 0 || y == HAUTEUR_BORDURE-1 || x == 0 || x == LARGEUR_BORDURE-1) {
                plateau[y][x] = BORDURE;  // Définir la bordure
            } else {
                plateau[y][x] = ESPACE;  // Remplir le centre avec des espaces
            }
        }
    }
}

/**
 * \fn void dessinerPlateau(char plateau[HAUTEUR_BORDURE][LARGEUR_BORDURE])
 * \brief Affiche le plateau dans le terminal
 * \param plateau : tableau 2D représentant le plateau de jeu
 *
 * La fonction affiche le plateau de jeu dans le terminal.
 */
void dessinerPlateau(char plateau[HAUTEUR_BORDURE][LARGEUR_BORDURE], int lesX[], int lesY[]) {
    system("clear");

    // Initialise le plateau avec des bordures
    for (int y = 0; y < HAUTEUR_BORDURE; y++) {
        for (int x = 0; x < LARGEUR_BORDURE; x++) {
            if (y == 0 || y == HAUTEUR_BORDURE - 1 || x == 0 || x == LARGEUR_BORDURE - 1) {
                plateau[y][x] = BORDURE; // Positionne une bordure
            } 
            else {
                plateau[y][x] = ESPACE;  // Positionne un espace
            }
        }
    }

    // Insère les pavés de manière aléatoire
    for (int p = 0; p < NOMBRE_PAVE; p++) {
        bool positionValide = false;
        while (!positionValide) {
            int xPave = (rand() % (LARGEUR_BORDURE - TAILLE_PAVE - 4)) + 2; 
            int yPave = (rand() % (HAUTEUR_BORDURE - TAILLE_PAVE - 4)) + 2;

            positionValide = true;
            
            // Vérifie que le pavé ne chevauche pas le serpent
            for (int i = 0; i < TAILLE; i++) {
                if (xPave <= lesX[i] && lesX[i] < xPave + TAILLE_PAVE &&
                    yPave <= lesY[i] && lesY[i] < yPave + TAILLE_PAVE) {
                    positionValide = false;
                    break;
                }
            }

            // Place le pavé sur le plateau
            for (int i = 0; i < TAILLE_PAVE; i++) {
                for (int j = 0; j < TAILLE_PAVE; j++) {
                    if ((yPave + i) < HAUTEUR_BORDURE && (xPave + j) < LARGEUR_BORDURE) {
                         plateau[yPave + i][xPave + j] = BORDURE; // Marque correctement chaque case du pavé
                    }
                }
            }
        }
    }

    // Affiche le plateau avec les pavés
    for (int y = 0; y < HAUTEUR_BORDURE; y++) {
        for (int x = 0; x < LARGEUR_BORDURE; x++) {
            printf("%c", plateau[y][x]);
        }
        printf("\n");
    }
}
